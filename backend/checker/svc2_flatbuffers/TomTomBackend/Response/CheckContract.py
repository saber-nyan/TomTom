# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Response

import flatbuffers

class CheckContract(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsCheckContract(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CheckContract()
        x.Init(buf, n + offset)
        return x

    # CheckContract
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CheckContract
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return -1

    # CheckContract
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CheckContract
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CheckContract
    def Price(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return -1.0

    # CheckContract
    def Attachment(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # CheckContract
    def AttachmentAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # CheckContract
    def AttachmentLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CheckContract
    def Status(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 1

    # CheckContract
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # CheckContract
    def ByUser(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .User import User
            obj = User()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def CheckContractStart(builder): builder.StartObject(8)
def CheckContractAddId(builder, id): builder.PrependInt64Slot(0, id, -1)
def CheckContractAddName(builder, name): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def CheckContractAddDescription(builder, description): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)
def CheckContractAddPrice(builder, price): builder.PrependFloat64Slot(3, price, -1.0)
def CheckContractAddAttachment(builder, attachment): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(attachment), 0)
def CheckContractStartAttachmentVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def CheckContractAddStatus(builder, status): builder.PrependUint8Slot(5, status, 1)
def CheckContractAddCreatedAt(builder, createdAt): builder.PrependUint64Slot(6, createdAt, 0)
def CheckContractAddByUser(builder, byUser): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(byUser), 0)
def CheckContractEnd(builder): return builder.EndObject()
