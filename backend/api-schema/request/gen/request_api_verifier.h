#ifndef REQUEST_API_VERIFIER_H
#define REQUEST_API_VERIFIER_H

/* Generated by flatcc 0.6.1-dev FlatBuffers schema compiler for C by dvide.com */

#ifndef REQUEST_API_READER_H
#include "request_api_reader.h"
#endif
#include "flatcc/flatcc_verifier.h"
#ifndef REQUEST_CONTRACT_VERIFIER_H
#include "request_contract_verifier.h"
#endif
#ifndef REGISTER_VERIFIER_H
#include "register_verifier.h"
#endif
#ifndef LOGIN_VERIFIER_H
#include "login_verifier.h"
#endif
#ifndef LIST_CONTRACTS_VERIFIER_H
#include "list_contracts_verifier.h"
#endif
#ifndef GET_ME_VERIFIER_H
#include "get_me_verifier.h"
#endif
#ifndef EDIT_ME_VERIFIER_H
#include "edit_me_verifier.h"
#endif
#ifndef CHECK_CONTRACT_VERIFIER_H
#include "check_contract_verifier.h"
#endif
#include "flatcc/flatcc_prologue.h"

static int TomTomBackend_Request_Message_verify_table(flatcc_table_verifier_descriptor_t *td);

static int TomTomBackend_Request_MessageType_union_verifier(flatcc_union_verifier_descriptor_t *ud)
{
    switch (ud->type) {
    case 1: return flatcc_verify_union_table(ud, TomTomBackend_Request_Login_verify_table); /* Login */
    case 2: return flatcc_verify_union_table(ud, TomTomBackend_Request_Register_verify_table); /* Register */
    case 3: return flatcc_verify_union_table(ud, TomTomBackend_Request_GetMe_verify_table); /* GetMe */
    case 4: return flatcc_verify_union_table(ud, TomTomBackend_Request_EditMe_verify_table); /* EditMe */
    case 5: return flatcc_verify_union_table(ud, TomTomBackend_Request_RequestContract_verify_table); /* RequestContract */
    case 6: return flatcc_verify_union_table(ud, TomTomBackend_Request_ListContracts_verify_table); /* ListContracts */
    case 7: return flatcc_verify_union_table(ud, TomTomBackend_Request_CheckContract_verify_table); /* CheckContract */
    default: return flatcc_verify_ok;
    }
}

static int TomTomBackend_Request_Message_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_union_field(td, 1, 1, &TomTomBackend_Request_MessageType_union_verifier) /* msg */)) return ret;
    return flatcc_verify_ok;
}

static inline int TomTomBackend_Request_Message_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, TomTomBackend_Request_Message_identifier, &TomTomBackend_Request_Message_verify_table);
}

static inline int TomTomBackend_Request_Message_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, TomTomBackend_Request_Message_type_identifier, &TomTomBackend_Request_Message_verify_table);
}

static inline int TomTomBackend_Request_Message_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &TomTomBackend_Request_Message_verify_table);
}

static inline int TomTomBackend_Request_Message_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &TomTomBackend_Request_Message_verify_table);
}

#include "flatcc/flatcc_epilogue.h"
#endif /* REQUEST_API_VERIFIER_H */
