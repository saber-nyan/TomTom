// automatically generated by the FlatBuffers compiler, do not modify

package online.mctf.tomtom.api.models.Request;

import androidx.annotation.Nullable;

import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class RequestContract extends Table {
	public static RequestContract getRootAsRequestContract(ByteBuffer _bb) {
		return getRootAsRequestContract(_bb, new RequestContract());
	}

	public static RequestContract getRootAsRequestContract(ByteBuffer _bb, RequestContract obj) {
		_bb.order(ByteOrder.LITTLE_ENDIAN);
		return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb));
	}

	public static int createRequestContract(FlatBufferBuilder builder,
											int tokenOffset,
											int nameOffset,
											int descriptionOffset,
											double price,
											int attachmentOffset) {
		builder.startObject(5);
		RequestContract.addPrice(builder, price);
		RequestContract.addAttachment(builder, attachmentOffset);
		RequestContract.addDescription(builder, descriptionOffset);
		RequestContract.addName(builder, nameOffset);
		RequestContract.addToken(builder, tokenOffset);
		return RequestContract.endRequestContract(builder);
	}

	public static void startRequestContract(FlatBufferBuilder builder) {
		builder.startObject(5);
	}

	public static void addToken(FlatBufferBuilder builder, int tokenOffset) {
		builder.addOffset(0, tokenOffset, 0);
	}

	public static void addName(FlatBufferBuilder builder, int nameOffset) {
		builder.addOffset(1, nameOffset, 0);
	}

	public static void addDescription(FlatBufferBuilder builder, int descriptionOffset) {
		builder.addOffset(2, descriptionOffset, 0);
	}

	public static void addPrice(FlatBufferBuilder builder, double price) {
		builder.addDouble(3, price, -1.0);
	}

	public static void addAttachment(FlatBufferBuilder builder, int attachmentOffset) {
		builder.addOffset(4, attachmentOffset, 0);
	}

	public static int createAttachmentVector(FlatBufferBuilder builder, byte[] data) {
		builder.startVector(1, data.length, 1);
		for (int i = data.length - 1; i >= 0; i--) builder.addByte(data[i]);
		return builder.endVector();
	}

	public static void startAttachmentVector(FlatBufferBuilder builder, int numElems) {
		builder.startVector(1, numElems, 1);
	}

	public static int endRequestContract(FlatBufferBuilder builder) {
		int o = builder.endObject();
		builder.required(o, 4);  // token
		builder.required(o, 6);  // name
		return o;
	}

	public void __init(int _i, ByteBuffer _bb) {
		bb_pos = _i;
		bb = _bb;
		vtable_start = bb_pos - bb.getInt(bb_pos);
		vtable_size = bb.getShort(vtable_start);
	}

	public RequestContract __assign(int _i, ByteBuffer _bb) {
		__init(_i, _bb);
		return this;
	}

	public String token() {
		int o = __offset(4);
		return o != 0 ? __string(o + bb_pos) : null;
	}

	public ByteBuffer tokenAsByteBuffer() {
		return __vector_as_bytebuffer(4, 1);
	}

	public ByteBuffer tokenInByteBuffer(ByteBuffer _bb) {
		return __vector_in_bytebuffer(_bb, 4, 1);
	}

	public String name() {
		int o = __offset(6);
		return o != 0 ? __string(o + bb_pos) : null;
	}

	public ByteBuffer nameAsByteBuffer() {
		return __vector_as_bytebuffer(6, 1);
	}

	public ByteBuffer nameInByteBuffer(ByteBuffer _bb) {
		return __vector_in_bytebuffer(_bb, 6, 1);
	}

	public @Nullable
	String description() {
		int o = __offset(8);
		return o != 0 ? __string(o + bb_pos) : null;
	}

	public ByteBuffer descriptionAsByteBuffer() {
		return __vector_as_bytebuffer(8, 1);
	}

	public ByteBuffer descriptionInByteBuffer(ByteBuffer _bb) {
		return __vector_in_bytebuffer(_bb, 8, 1);
	}

	public double price() {
		int o = __offset(10);
		return o != 0 ? bb.getDouble(o + bb_pos) : -1.0;
	}

	public int attachment(int j) {
		int o = __offset(12);
		return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0;
	}

	public int attachmentLength() {
		int o = __offset(12);
		return o != 0 ? __vector_len(o) : 0;
	}

	public ByteBuffer attachmentAsByteBuffer() {
		return __vector_as_bytebuffer(12, 1);
	}

	public ByteBuffer attachmentInByteBuffer(ByteBuffer _bb) {
		return __vector_in_bytebuffer(_bb, 12, 1);
	}
}

